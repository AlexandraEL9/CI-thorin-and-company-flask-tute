________________template inheritance
allows us to inherit code from other templates
by creating a base template using 
                              {% extends 'base.html' %} 
    in a child template

aim to reduce duplicated code   eg- navbar copied repeatedly!

create a base template that can act as the primary page

{% block content %}
{% block content %}

defining a block or area that we can inject content into from other pages

The difference between the percent sign and the double curly bracket notation that we've
used before, is that the double curly brackets contain an 'expression', which is outputting
something either onto the screen, or in this case, into our href.
The curly bracket and percentage are for statements that control the flow of our template, such
as a for-loop, if-statement, or this block element.

within html- remove all non-specific/ repeated content either side of the specific stuff

(% extends "base.html" %)
{% block content %}
    <h1>Home Page</h1>
{% endblock %}


-------------------------------------------------------------------APPLYING STYLES
--------------------------------------------------Using a bootstrap theme
allows us to quickly style oyr website
downloaded from 'Start Bootstrap'

https://startbootstrap.com/

clean blog
wget https://github.com/StartBootstrap/startbootstrap-clean-blog/archive/refs/tags/v5.0.10.zip

in terminal:
   
mkdir static            -make directory      call it static
dc static               -change directory- into static
wget https://github.com/StartBootstrap/startbootstrap-clean-blog/archive/refs/tags/v5.0.10.zip       -paste link from bootstrap site
           -this downloads the source files

ls      command shows the zip files
unzip file     unzip v5.0.10.zip

cd -         leave static directory


in start bootstrap new folder in static directory--
  -I want the CSS and the other directories to be one level above, directly within the 'static'
folder.
Just click on the CSS folder, hold down the Shift key, then click on the Vendor folder. (css, img, js, mail, scss, vendor)
Once these are all highlighted, drag these directories one level up to the 'static' folder.  

We don't need the 'startboostrap' folder, nor the 'gh-pages.zip' file anymore, so I
can safely delete both of those now.

____________CSS file
base. html and add new line in head element under meta tags
       <link rel="stylesheet" href="{{ url_for('static', filename='css/clean-blog.min.css') }}">

add clas that's already in the cleanblog css file- navbar

      <nav class="navbar">
        <ul>
            <li><a href="{{ url_for('index') }}">Home</a></li>
            <li><a href="{{ url_for('about') }}">About</a></li>
            <li><a href="{{ url_for('contact') }}">Contact</a></li>
            <li><a href="{{ url_for('careers') }}">Careers</a></li>
        </ul>
    </nav>


--------------------------------------------------Styling templates
Taking the styles of the theme and adding them to our own site
Styles the content on our site
By using the theme that we got from Start Bootstrap

open in github and look at elements

eg- in index.html

load the bootstrap.css file

<!-- Bootstrap core CSS -->
<link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

in base.html head
<link rel="stylesheet" href="{{ url_for('static', filename='vendor/bootstrap/css/bootstrap.min.css') }}">


- now do everything in the body   copy   
paste int base template- removing block elements for now.


-----Next, we need to update all of the <script> sources for the JavaScript files.
Once again, because we are referencing files that are within our own repository, we must
use the url_for() function.
url_for('static', filename=, and then just the link that's already provided to our vendor
directory.

<!-- Bootstrap core JavaScript -->
  <script src="{{ url_for('static', filename='vendor/jquery/jquery.min.js') }}"></script>
	<script src="{{ url_for('static', filename='vendor/bootstrap/js/bootstrap.bundle.min.js') }}"></script>
  <!-- Custom scripts for this template -->
  <script src="{{ url_for('static', filename='js/clean-blog.min.js') }}"></script>

---background image
scroll up to page header

change this:
<header class="masthead" style="background-image: url('img/home-bg.jpg')">
to this>
<header class="masthead" style="background-image: url('{{ url_for('static', filename='img/home-bg.jpg') }}')">

Everything is now loading properly, and we have these boilerplate posts as well.
What we can do next, is to take those sample posts and put them into our index.html file
as part of the 'block content', then add our block back into the base template.
To do that, let's find the <!--Main Content--> section, which is line 54 for me, and highlight
everything within the container div, all the way down to the closing div for this row.
We don't want to include the container div itself, so be careful not to remove that.
I will just cut all of this out using Ctlr+X on a PC, or Command+X on a Mac, but if you're
unsure, right-click and select the 'Cut' option.
In its place, I will then add my {% block content %} tags back in, making sure to include
the closing {% endblock %} as well.

Let's replace the existing <h1> header with the boilerplate posts that we cut out of the
base template.



--------------------------------------------------Making The Design Our Own
Styling our site
Customising the theme
By modifying the theme to suit our needs




---------------------------------------------------------------------------------   FLASK AND DATA
------------------------------------------------------- Adding in some company DATA
Gives the user some information on the company
By creating some HTML that contains the information

about page

------------------------------------------------------- Passing Data From A View To A Template
Information that we can provide to a template from the backend
Allows us to generate information inside our view and inject it into a template
By passing named arguments to the render_template function

one of the greatest benefits of using frameworks, is the fact that we can actually
get server-side code to provide the frontend with data.

---in run.py
page_title="About")

@app.route("/about")
def about():
    return render_template("about.html", page_title="About")

--in html
<h2>{{ page_title }}</h2>

------------------------------------------------------- Using For Loops Inside HTML
A template tag
allows us to perform logic inside of our HTML templates. In this case, it allows us to use a for loop inside of our HTML
By using the {% %} template tags

how we can reduce repetition even
more.

one of the beauties of frameworks is being able to iterate
over lists using a for-loop.
To do that, we use the {% notation, because if you remember, that's for statements, not
for expressions.
This is called 'logic control'.

{%for number in list_of_numbers %}

 need to make sure to stop our for-loop by using the 'endfor' statement: {% endfor
%}. That way the Jinja templating language knows
where the for-loop stops, and doesn't throw any unwanted errors.
Inside of the for-loop, I'd like to generate a <p>aragraph tag for each iteration.

------------------------------------------------------- Reading From A JSON File
A JSON file that will contain our data
Allows us to store data in a JSON file
By creating a .json file and adding our data to the file

It would be good if we could load all of this information from a file, and then display
it to the screen.

start by creating a new directory called 'data'.
 creating a new file called 'company.JSON'.

This file is going to contain an array of objects.
Square brackets for the array, then curly brackets for our first object.
This object will have three keys.
"Name", which I will set to Thorin Oakenshield.
"Description", which will contain a brief biography about him.
And then "image_source", which will contain a link to the image.
Since we already have the biography details, I will just grab that from my 'About' page.
Just copy the text within our biography paragraph, and then paste that in between the quotes
for the 'description' key.

text all on one linereplace "double quotes" for 'single quotes'

run.py
@app.route("/about")
def about():
    data = []
    with open("data/company.json", "r") as json_data:
        data = json.load(json_data)
    return render_template("about.html", page_title="About", company=data)


------------------------------------------------------- Iterating Over Our JSON Data

A for loop to iterate over our JSON data
allows us to re-render the same HTML code for each item in a list (or iterable)
By passing the data to the template and using the {% for member in company_data %} tag

be good though, is if we could iterate through all of that data using a for-loop,
so that if we add another member to Thorin's company, we don't have to worry about changing
all of our hard-coded HTML.


------------------------------------------------------- Using If Statements Inside Our HTML
The if template tag
Allows us to use if statements inside our templates
By using the {% if some_condition %} tag and the closing {% endif %} tag

everse the order of the images and
text for each subsequent row, just as we did in our initial setup

We can actually do this quite easily, because when we create a for-loop using the Jinja
templating language, it also creates an object for us called 'loop'.
That 'loop' object has a property which is '.index'.
This shows us exactly which iteration of the loop we're on.
If I just put it in there as an expression and reload the page, you can see that the
first iteration, so number 1, is Thorin, and number 2 is Kili and Fili, and so on and so
forth, until the very end of the loop, which is the number 13 for Gandalf.

We can actually move this loop.index and put it into our member.name <h3> tags.
I will just add a 'dot' after the index number, to separate it from the member's name.
This now gives us a nice numbered list of all the members of Thorin's company.
But we can do more than this.
We can actually check this value, to see where we are in the for-loop itself.
What we are going to do, is put an if-statement.
Just like with for-loops, if-statements in our templates go between curly brackets and
% notation, because they are logic.
Immediately after the opening .featurette row, let's add: {% if loop.index % 2 != 0
%}. Then, I will add the {% endif %} line before
the closing </div> tag.
This is to let the Jinja templating language know where to stop the if-statement.
I'm just going to indent everything within the if-statement to make our code cleaner
and easier to read logically.
Let's discuss what this if-statement will do.
If our loop.index is not divisible by 2 evenly, then we want to display that member to the
page.
Essentially, we are looking for odd numbers, since any odd number % 2 will never result
in 0.
I will save that, and reload the preview to see what effect that has on our page at the
moment.
As you can see, we only have any member with an odd loop.index number, displaying on the
page now.
Next, we want to get all of the even rows to display with the text on the left, and
the image on the right.
What we can do is put an {% else %} statement, and this will take care of the even rows.
Inside of our else statement, any loop.index that is even will be displayed within this
section.
Again, I want to start by showing the image on the left, so let's copy the code from above,
and paste in our else statement.
Then, we want the text to be on the right, so we'll copy the code from above again, and
paste that below our image.
This will now display the text on the left and image on the right, if it's an odd loop.index
number (1, 3, 5, etc.).
But it will display the image on the left, and the text on the right, if it's an even
loop.index number (2, 4, 6, etc.).
Let's save that and reload the page to check it's working.
Yep, as you can see, it's behaving as expected, with each row alternating left and right,
which gives us a much nicer layout.
One thing you may have noticed though, is that we still have this horizontal rule at
the very end underneath Gandalf as well, which looks a bit messy.
What we can do, is once again, use another if-statement to take care of that.
Let's wrap our <hr> tag inside of its own if-clause.
We know that we have 13 elements in our loop, so what we need is:
{% if loop.index != 13 %}, then display the horizontal rule.
Don't forget to close off our {% endif %} line below that, and hit tab to properly indent
the <hr> element as well.
When I reload the page, as you can see, the horizontal rule has disappeared, but only
after the 13th item in our for-loop, and it looks a lot cleaner.
But what happens if we have dozens of items in our loop, and we aren't sure the exact
number of elements inside of that loop?
Well, the Jinja templating language actually has a lof of built-in filters that we could
use.
The full documents for Jinja can be found at: jinja.palletsprojects.com.
Once there, under the section for "Template Designer Documentation", is a "List of Builtin
Filters".
There's a lot of really fun and useful stuff here that we can use to improve our code,
but for now, I'm just interested in "length()".
We can update our if-statement to check {% if loop.index != loop.length %}, then show the
<hr> divider.
Let's see what that looks like.
That's working perfectly now, and we have the <hr> divider for all of the items, except
for the final loop.index item, without having to know the exact number of items in our loop.
In this series of videos, we've looked at how to get data from the backend displayed
through onto the frontend.
We've also seen how using features of the Jinja templating language can help us write
less HTML, by using variables and logic, such as for-loops and if/else-statements.
Next, we are going to have a look at how to create forms, and then some advanced routing
techniques.
